 import run.GUI;

Plant(
		// Conveyor/////////////////////////////////////////////////////// 
		input signal motConveyorOnOff;
		output signal bottleAtPos1, bottleAtPos5;

		input signal enable,refill;
		output signal bottleAtPos1E, bottleAtPos5E, motConveyorOnOffE;
		///////////////////////////////////////////////////////////////////
		
		// Filler
		input signal valveInjectorOnOff,valveInletOnOff,dosUnitValveRetract,dosUnitValveExtend ; //to plant
		output signal fillerReq; // from orchestrator
		output Integer signal selectCanister,percentLiquid;// orchestrator
		output signal bottleAtPos2, dosUnitEvac, dosUnitFilled;  // from plant
		output Integer signal currentlySelectedCanister; // from plant
		
		//input
		//output
		
		///////////////////////////////////////////////////////////////////
		
		// CapLoader
		
//		input signal pusherExtend,vacOn,armSource,armDest;
//		output signal pusherRetracted,pusherExtended,WPgripped,armAtSource,armAtDest,empty;
//		output signal pusherRetractedE,pusherExtendedE,WPgrippedE,armAtSourceE,armAtDestE,emptyE;
		/////////////////////////////////////////////////////////////////////	
		
		
		// Cap Screwer
		
		
		
		/////////////////////////////////////////////////////////////////////
		
		
		//Rotatry Table
		
		
		/////////////////////////////////////////////////////////////////////
		
		
		
		
		)
->
{
	new Thread(new GUI()).start();
//	signal capDec;
//	int signal capPos;
//	emit capPos(0);
	
////////////////////////////////////////////////////////////////////////////////////////////////
//Conveyor
	{
		// LOGIC HERE
		while(true){
			await(enable);
			//idle 
			abort(!enable){// When enabled, the bottle leaves pos5.
                //The bottle is at pos2
			//	System.out.println("sustaining bottle at pos 5");
				sustain bottleAtPos5;
				pause;
			}// once it leaves the abort it changes to false 						

			//After bottle leaves pos5
		
			await(enable);
			pause;

				
			abort(valveInjectorOnOff){//
			//		System.out.println("sustaining bottle at pos 1");
					sustain bottleAtPos1;
			}
			//turns arrow off
			await(!enable);
			//its for the ui, usually it should immediately go low but we have the enable to frame it.
			abort(enable){
				sustain bottleAtPos1;
			}
			//

			await(enable);
			//System.out.println("im outtt");
			pause;
		}
	} 
	
	||
	
	//Filler /////////////////////////////////////////////////////////////////////
	{
		// LOGIC HERE
				while(true){
				{
					await(enable);
					//idle 
					abort(!enable){// When enabled, the bottle leaves pos5.
		                //The bottle is at pos5.
						System.out.println("bottle at pos2");
						// these signals will come frmo the orchestra
						{sustain fillerReq;} ||  
						{sustain selectCanister;} || //
						{sustain percentLiquid;} || //
						{sustain bottleAtPos2;} 
						pause;
					}// once it leaves the abort it changes to false 		
					
					await(enable);
					pause;
					{emit selectCanister(2);} || {emit currentlySelectedCanister(2);}
					System.out.println("Canister selection");
					
					await(enable);
					present(valveInletOnOff){
						emit dosUnitFilled;
					}
					System.out.println("Bottle plant filled");
					await(enable);
					
					pause;
					}
					
					||
					
					{
						//when pressure canister is at bottom,
						
						abort(dosUnitValveRetract){//  when actuator brings to top
							sustain dosUnitEvac; //emit canister at bottom
						}
						System.out.println("Canister at top");
						
						await(dosUnitValveExtend);// wait to be brought down to -
						System.out.println("Canister at bottom");
						pause;
						
					}

					await(enable);
					await(enable);
					
					//emit two signals
				}

	}
	/////////////////////////////////////////////////////////////////

//	||
	
//Cap Loader////////////////////////////////////////////	
//	{// Arm
//		while(true){
//			abort(armSource && enable){
//				sustain armAtDest;
//			}
//			await(!enable);
//			abort(armDest && enable){
//				sustain armAtSource;
//			}
//			await(!enable);
//		}
//	}
//	||
//	{// Pusher
//		while(true){
//			abort(pusherExtend && enable){
//				sustain pusherRetracted;
//			}
//			await(!enable);
//			abort(!pusherExtend && enable){
//				sustain pusherExtended;
//			}
//			await(!enable);
//		}
//	}
//	||
//	{// Vacuum
//		while(true){
//			present(vacOn && armAtSource){
//				if((Integer)#capPos == 1){
//					emit capPos(0);
//					abort(!vacOn){
//						sustain WPgripped; 
//					}
//					present(armAtSource){ 
//						emit capPos(1);
//					}
//				}
//			}
//			pause;
//		}
//	}
//	||
//	{
//		/*
//		 * Cap positions
//		 * 0 = at Mag
//		 * 1 = at pick-up
//		 */
//		while(true){
//			// At mag
//			abort(empty){
//				while(true){
//						await(pusherRetracted);
//						await(pusherExtended);
//						// At pick-up
//						emit capPos(1);
//						await(pusherRetracted);
//						emit capDec;
//				}
//			}
//			await(refill);
//		}
//	}
//	||
//	{
//		
//		while(true){
//			present(c1){
//				System.out.println("q");
//			}
//			present(c2){
//				System.out.println("1");
//			}
////			present(c3){
//				System.out.println("2");
////			}
//			pause;
//		}
//	}
	
//	||
//	
//// Cap Screwer
//	{
//		while(true) {pause;}
//	}
//	
//	||
//	
////Rotatry Table
//	{
//		while(true) {pause;}
//	}
//	
//	
	
/////////////////////////////////////////////////////////////////////
	
	
	
	||
	{//Emit Signals - GOing to UI
		{while(true) {present(motConveyorOnOff){emit motConveyorOnOffE;} pause;}}
		||
		{while(true){present(bottleAtPos1){emit bottleAtPos1E;} pause;}}
		||
		{while(true) {present(bottleAtPos5){emit bottleAtPos5E;} pause;}}
		
//		{while(true){present(pusherExtended){emit pusherExtendedE;} pause;}}
//		||
//		{while(true){present(WPgripped){emit WPgrippedE;} pause;}}
//		||
//		{while(true){present(armAtSource){emit armAtSourceE;} pause;}}
//		||
//		{while(true){present(armAtDest){emit armAtDestE;} pause;}}
//		||
//		{while(true){present(empty){emit emptyE;} pause;}}
	}
}
