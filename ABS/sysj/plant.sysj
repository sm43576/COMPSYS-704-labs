 import run.GUI;

Plant(
		
		
		// Global ////////////////////////////////////////////////////////
		input signal  enable,refill, removeBottle; //TODO: need remove bottle in GUI
		
		// Conveyor/////////////////////////////////////////////////////// 
		input signal motConveyorOnOff, motorPos1On, motorPos5On;
		output signal bottleAtPos1, bottleAtPos5, RTbottleAtPos1, bottleLeftPos5;

		
		output signal bottleAtPos1E, bottleAtPos5E, motConveyorOnOffE;
		///////////////////////////////////////////////////////////////////
		
		// Filler
		input signal valveInjectorOnOff,valveInletOnOff,dosUnitValveRetract,dosUnitValveExtend; //to plant
		input Integer signal selectCanister,receivedPercentage;
		output signal dosUnitEvac;  // from plant
		output Integer signal selectedCanister,dosUnitFilled; // from PLANT
		
		//input
		//output
		
		///////////////////////////////////////////////////////////////////
		
		// CapLoader
		
		input signal pusherExtend,vacOn,armSource,armDest;
		output signal pusherRetracted,pusherExtended,WPgripped,armAtSource,armAtDest,empty;
		output signal pusherRetractedE,pusherExtendedE,WPgrippedE,armAtSourceE,armAtDestE,emptyE;
		/////////////////////////////////////////////////////////////////////	
		
		
		// Capper
		
		//Input signals from capper controller
		input signal cylPos5ZAxisExtend;
		input signal gripperTurnRetract, gripperTurnExtend;
		input signal capGripperPos5Extend;
		input signal cylClampBottleExtend;
		
		//Output signals to capper controller
		output signal bottleAtPos4;
		output signal gripperZAxisLowered;
		output signal gripperZAxisLifted;
		output signal gripperTurnHomePos;
		output signal gripperTurnFinalPos;
		output signal gripperGrippedCap;
		output signal cylClampedBottle;
		/////////////////////////////////////////////////////////////////////
		
		
		//Rotatry Table
		
		input signal rotaryTableTrigger;
		output signal tableAlignedWithSensor, capOnBottleAtPos1, bottleAtPos2, bottleAtPos3; //bottleAtPos1; dupe
		output signal moveToPos5, moveToPos4, moveToPos3, moveToPos2;
		
		
		/////////////////////////////////////////////////////////////////////
		
		
		
		
		)
->
{
//	new Thread(new GUI()).start();
	// Caploader internal signals
	signal capDec;
	int signal capPos;
	emit capPos(0);
	signal disablePos5;
////////////////////////////////////////////////////////////////////////////////////////////////
//Conveyor
	{
		// LOGIC HERE
		while(true){
			present(motConveyorOnOff){
				{
					present(motorPos1On){ // motor is on and move bottle at pos 1
						System.out.println("Conveyor plant - moving bottle to 1");
						abort(moveToPos2) {
							sustain bottleAtPos1;
						}
					}
				}
				||
				{
					present(motorPos5On){ // motor is on and remove bottle at pos 5
						System.out.println("Conveyor Plant - moving bottle to leave 5");
						abort(!motorPos5On && !motConveyorOnOff) {
							sustain bottleLeftPos5;
						}
					}
				}
			}
//			System.out.println("motor is off");
			pause;
		}
	}		
		
	||
	{
		// To tell rotary table that bottle is at position 1 since you can't have a signal going into two clock domains
		while(true) {
			present(bottleAtPos1){
//				System.out.println("sending info to rotary that bottle is at position1");
				emit RTbottleAtPos1; 
			}
//			System.out.println("no longer");
			pause;
		}
	}
	
	||
	
	//Filler /////////////////////////////////////////////////////////////////////
	{
		// LOGIC HERE
		while(true){
			{//Selected canister
				await(selectCanister); 
				int canister = #selectCanister;
				System.out.println("canister number received");
				emit selectedCanister(canister);
					
			}
			
			||
			
			{//Fill Valve
				await(receivedPercentage);
				System.out.println("filled");
				present(valveInletOnOff){
					emit dosUnitFilled(receivedPercentage);
					pause;
				}
			}
				
			||
			
			{// Retract/extend Arm
					abort(dosUnitValveRetract){//  when actuator brings to top
						sustain dosUnitEvac; //emit canister at bottom
					}
					System.out.println("Canister at top");
					
					await(dosUnitValveExtend);// wait to be brought down to -
					System.out.println("Canister at bottom");
					pause;
					
				}
			
			//emit two signals
		}

	}
	/////////////////////////////////////////////////////////////////

	||
	
//Cap Loader////////////////////////////////////////////	
	{// Arm
		while(true){
			abort(armSource){
				sustain armAtDest;
			}
			abort(armDest){
				sustain armAtSource;
			}
		}
	}
	||
	{// Pusher
		while(true){
			abort(pusherExtend){
				sustain pusherRetracted;
			}
			abort(!pusherExtend){
				sustain pusherExtended;
			}
		}
	}
	||
	{// Vacuum
		while(true){
			present(vacOn && armAtSource){
				if((Integer)#capPos == 1){
					emit capPos(0);
					abort(!vacOn){
						sustain WPgripped; 
					}
					present(armAtSource){
						emit capPos(1);
					}
				}
			}
			pause;
		}
	}
	||
	{
		/*
		 * Cap positions
		 * 0 = at Mag
		 * 1 = at pick-up
		 */
		while(true){
			// At mag
			abort(empty){
				while(true){
						await(pusherRetracted);
						await(pusherExtended);
						// At pick-up
						emit capPos(1);
						await(pusherRetracted);
						emit capDec;
				}
			}
			await(refill);
		}
	}
	||
	{
		int capcount = 5;
		while(true){
			present(capDec){
				if(capcount > 0)
					capcount--;
			}
			present(refill){
				capcount = 5;
			}
//			present(pusherRetracted){
				if(capcount == 0)
					emit empty;
//			}
			pause;
		}
	}
	||
	
	// Capper
		{
			while(true) {
				await(moveToPos4);//bottle is in position 4. Need to inform controller. 
				abort (moveToPos5) {
					sustain bottleAtPos4; //Maintain bottleAtPos4 signal until a signal is received to turn the table.
				}
				pause;
			}
		}
		||
	//Cap Screwer - Move Gripper
		{
			while(true) {
				abort(cylPos5ZAxisExtend) {
					sustain gripperZAxisLifted; //If cylPos5ZaxisExtend is absent, sustain lifted signal.
				}
				abort (!cylPos5ZAxisExtend) {
					sustain gripperZAxisLowered; //If cylPos5ZaxisExtend is present, sustain lowered signal.
				}
				pause;
			}
		}
		||
	//Cap Screwer - Gripper
		{
			while(true) {
				await(capGripperPos5Extend);
				abort (!capGripperPos5Extend) {
					sustain gripperGrippedCap; 
				}
				pause;
			}
		}
		||
	//Cap Screwer - Twister
		{
			while(true) {
				present(gripperTurnExtend && !gripperTurnRetract){
					abort (gripperTurnRetract){
						sustain gripperTurnFinalPos; 
					}
				}
				present(gripperTurnRetract && !gripperTurnExtend) {
					abort (gripperTurnExtend) {
						sustain gripperTurnHomePos; 
					}
				}
				pause;
			}
		}
		|| 
	//Cap Screwer - Clamps
		{
			while(true) {
				await(cylClampBottleExtend);
				abort (!cylClampBottleExtend) {
					sustain cylClampedBottle; //Maintain bottleAtPos4 signal until a signal is received to turn the table.
				}
				pause;
			}
		}
	||	
	//Rotary Table
	{
		while(true) {
			present(rotaryTableTrigger){
				// Turn the table 60 degrees and move the bottles along by one somehow
				//Ensure the table positions are aligned with the sensors via tableAlignedWithSensor.
				System.out.println("table triggered now moving");
				
				// if there is a bottle at pos 4 move to pos 5
				present(bottleAtPos4) {
					System.out.println("moving bottle at pos 4 to pos 5");
					emit moveToPos5;
				}
				pause;
				
				// if there is a bottle at pos 3 move to pos 4
				present(bottleAtPos3){
					System.out.println("moving bottle at pos 3 to pos 4");
					emit moveToPos4;
				}
				pause;
				// if there is a obttle at pos 2 move to pos 3
				
				present(bottleAtPos2){
					System.out.println("moving bottle at pos 2 to pos 3");
					emit moveToPos3;
				}
				pause;
				// if there is a bottle at pos 1 move to pos 2.
				present(bottleAtPos1){
					System.out.println("moving bottle at pos 1 to pos 2");
					emit moveToPos2;
				}
				pause;
				// emit table aligned with sensor
				System.out.println("Table has been aligned");
				emit tableAlignedWithSensor;
				pause;
				
			}
				
			pause;
				
		}
	}
	||
	{
		while(true) {
			abort(bottleLeftPos5){ // stop emitting bottleAtPos5 when bottle has left pos 5
				present(moveToPos5){
					System.out.println("bottle is now at pos 5"); 
					sustain bottleAtPos5;
				} 
			}
			pause;
		}
	}
	||
	{while(true) {present(moveToPos4){System.out.println("bottle is now at pos 4"); sustain bottleAtPos4;}pause;}}
	||
	{while(true) {present(moveToPos3){System.out.println("bottle is now at pos 3"); sustain bottleAtPos3;}pause;}}
	||
	{while(true) {present(moveToPos2){System.out.println("bottle is now at pos 2"); sustain bottleAtPos2;}pause;}}

/////////////////////////////////////////////////////////////////////
	
	
	
//	||
//	{//Emit Signals - GOing to UI
//		{while(true) {present(motConveyorOnOff){emit motConveyorOnOffE;} pause;}}
//		||
//		{while(true){present(bottleAtPos1){emit bottleAtPos1E;} pause;}}
//		||
//		{while(true) {present(bottleAtPos5){emit bottleAtPos5E;} pause;}}
//		
////		{while(true){present(pusherExtended){emit pusherExtendedE;} pause;}}
////		||
////		{while(true){present(WPgripped){emit WPgrippedE;} pause;}}
////		||
////		{while(true){present(armAtSource){emit armAtSourceE;} pause;}}
////		||
////		{while(true){present(armAtDest){emit armAtDestE;} pause;}}
////		||
////		{while(true){present(empty){emit emptyE;} pause;}}
//	}
}
