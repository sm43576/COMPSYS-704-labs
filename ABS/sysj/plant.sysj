 import run.GUI;

Plant(

		// Global ////////////////////////////////////////////////////////
		input signal enable,refill, removeBottle; //TODO: need remove bottle in GUI
		// Conveyor/////////////////////////////////////////////////////// 
		input signal motConveyorOnOff;
		output signal bottleAtPos1, bottleAtPos5, RTbottleAtPos1;	
		/////////////////////////////////////////////////////////////////////	
		
		
		// Cap Screwer
		
		
		
		/////////////////////////////////////////////////////////////////////
		
		
		//Rotatry Table
		input signal rotaryTableTrigger;
		output signal tableAlignedWithSensor, capOnBottleAtPos1, bottleAtPos4, bottleAtPos3, bottleAtPos2; //bottleAtPos1; dupe
		output signal moveToPos5, moveToPos4, moveToPos3, moveToPos2;
		
		/////////////////////////////////////////////////////////////////////
		
		
		
		)
->
{
	new Thread(new GUI()).start();
//	signal capDec;
//	int signal capPos;
//	emit capPos(0);
	{// bottleAtPos 1 and bottleLeftPos 5 emision
		// LOGIC HERE
		while(true){
			await(enable);
			//idle 
//			abort(!enable){// When enabled, the bottle leaves pos5. //TODO: Temporary comment out to test out rotary tbh do we even need this
//                //The bottle is at pos5.
//				System.out.println("sustaining bottle at pos 5");
//				sustain bottleAtPos5;
//				pause;
//			}// once it leaves the abort it changes to false 						
			pause;
			
			//After bottle leaves pos5
			// Arrow turns on
			
			await(enable);
			pause;
			// Bottle has reached position 1 turn off motor
				
			abort(motConveyorOnOff){//
					System.out.println("sustaining bottle at pos 1");
					sustain bottleAtPos1;
			}
			//turns arrow off
			await(!enable);
//			//its for the ui, usually it should immediately go low but we have the enable to frame it.
//			abort(enable){
//				sustain bottleAtPos1;
//			}
			//

			await(!enable);
			System.out.println("im outtt");
			pause;
		}
	}

//	{// Arm
//		while(true){
//			abort(armSource && enable){
//				sustain armAtDest;
//			}
//			await(!enable);
//			abort(armDest && enable){
//				sustain armAtSource;
//			}
//			await(!enable);
//		}
//	}
//	||
//	{// Pusher
//		while(true){
//			abort(pusherExtend && enable){
//				sustain pusherRetracted;
//			}
//			await(!enable);
//			abort(!pusherExtend && enable){
//				sustain pusherExtended;
//			}
//			await(!enable);
//		}
//	}
//	||
//	{// Vacuum
//		while(true){
//			present(vacOn && armAtSource){
//				if((Integer)#capPos == 1){
//					emit capPos(0);
//					abort(!vacOn){
//						sustain WPgripped; 
//					}
//					present(armAtSource){ 
//						emit capPos(1);
//					}
//				}
//			}
//			pause;
//		}
//	}
//	||
//	{
//		/*
//		 * Cap positions
//		 * 0 = at Mag
//		 * 1 = at pick-up
//		 */
//		while(true){
//			// At mag
//			abort(empty){
//				while(true){
//						await(pusherRetracted);
//						await(pusherExtended);
//						// At pick-up
//						emit capPos(1);
//						await(pusherRetracted);
//						emit capDec;
//				}
//			}
//			await(refill);
//		}
//	}
//	||
//	{
//		
//		while(true){
//			present(c1){
//				System.out.println("q");
//			}
//			present(c2){
//				System.out.println("1");
//			}
////			present(c3){
//				System.out.println("2");
////			}
//			pause;
//		}
//	}
	||
	
// Cap Screwer
	{
		while(true) {pause;}
	}
	
	||
	
//Rotatry Table
	{
		while(true) {
			present(rotaryTableTrigger && enable){
				// Turn the table 60 degrees and move the bottles along by one somehow
				//Ensure the table positions are aligned with the sensors via tableAlignedWithSensor.
				
				await(!enable); 
				// if there is a bottle at pos 4 move to pos 5
				present(bottleAtPos4) {
					System.out.println("moving bottle at pos 4 to pos 5");
					emit moveToPos5;
				}
				await(enable);
				// if there is a bottle at pos 3 move to pos 4
				present(bottleAtPos3){
					System.out.println("moving bottle at pos 3 to pos 4");
					emit moveToPos4;
				}
				await(!enable); 
				// if there is a obttle at pos 2 move to pos 3
				
				present(bottleAtPos2){
					System.out.println("moving bottle at pos 2 to pos 3");
					emit moveToPos3;
				}
				await(enable);
				// if there is a bottle at pos 1 move to pos 2.
				present(bottleAtPos1){
					System.out.println("moving bottle at pos 1 to pos 2");
					emit moveToPos2;
				}
				await(enable);
				await(!enable);
				// emit table aligned with sensor
				System.out.println("Table has been aligned");
				emit tableAlignedWithSensor;
				pause;
				
			}
			
			pause;
			
		}
	}
	||
	{
		{
			// Random chance for a bottle to have a cap
			Integer numCutOff = 80;
			while(true) {
				present(bottleAtPos1 && enable){
					Integer randNum = (int)(Math.random()*100);
					System.out.println("Random Number is " + String.valueOf(randNum));
					if(randNum > numCutOff ) {
						abort(removeBottle){
							System.out.println("remove the bottle plz");
							sustain capOnBottleAtPos1;
						}
					}
				}
				pause;
				await(enable);
				await(!enable);
			}
		}
		
	}
	||
	{while(true) {present(moveToPos5 && enable){System.out.println("bottle is now at pos 5"); emit bottleAtPos5;} pause;}}
	||
	{while(true) {present(moveToPos4 && enable){System.out.println("bottle is now at pos 4"); emit bottleAtPos4;}}pause;}
	||
	{while(true) {present(moveToPos3 && enable){System.out.println("bottle is now at pos 3"); emit bottleAtPos3;}}pause;}
	||
	{while(true) {present(moveToPos2 && enable){System.out.println("bottle is now at pos 2"); emit bottleAtPos2;}}pause;}
	
/////////////////////////////////////////////////////////////////////
	
	
	
	||
	{//Emit Signals - GOing to UI
		{while(true) {present(motConveyorOnOff){emit motConveyorOnOffE;} pause;}}
		||
		{while(true){present(bottleAtPos1){emit bottleAtPos1E;} pause;}}
		||
		{while(true) {present(bottleAtPos5){emit bottleAtPos5E;} pause;}}
		
//		{while(true){present(pusherExtended){emit pusherExtendedE;} pause;}}
//		||
//		{while(true){present(WPgripped){emit WPgrippedE;} pause;}}
//		||
//		{while(true){present(armAtSource){emit armAtSourceE;} pause;}}
//		||
//		{while(true){present(armAtDest){emit armAtDestE;} pause;}}
//		||
//		{while(true){present(empty){emit emptyE;} pause;}}
	}
}
