 import run.GUI;
 
 

reaction CapLoader(: input signal motConveyorOnOff,
	input signal c1,
	input signal c2,
	input signal c3,
	input signal pusherExtend,
	input signal vacOn,
	input signal armSource,
	input signal armDest,
	input signal enable,
	input signal refill,
	output signal bottleAtPos1,
	output signal pusherRetracted,
	output signal pusherExtended,
	output signal WPgripped,
	output signal armAtSource,
	output signal armAtDest,
	output signal empty,
	output signal pusherRetractedE,
	output signal pusherExtendedE,
	output signal WPgrippedE,
	output signal armAtSourceE,
	output signal armAtDestE,
	output signal emptyE
	){
	
	new Thread(new GUI()).start();

	signal capDec;
	int signal capPos;
	emit capPos(0);
	{// Arm
		while(true){
			System.out.println("CapLoaddaaa");
			abort(armSource && enable){
				sustain armAtDest;
			}
			await(!enable);
			abort(armDest && enable){
				sustain armAtSource;
			}
			await(!enable);
		}
	}
	||
	{// Pusher
		while(true){
			abort(pusherExtend && enable){
				sustain pusherRetracted;
			}
			await(!enable);
			abort(!pusherExtend && enable){
				sustain pusherExtended;
			}
			await(!enable);
		}
	}
	||
	{// Vacuum
		while(true){
			present(vacOn && armAtSource){
				if((Integer)#capPos == 1){
					emit capPos(0);
					abort(!vacOn){
						sustain WPgripped; 
					}
					present(armAtSource){
						emit capPos(1);
					}
				}
			}
			pause;
		}
	}
	||
	{
		/*
		 * Cap positions
		 * 0 = at Mag
		 * 1 = at pick-up
		 */
		while(true){
			// At mag
			abort(empty){
				while(true){
						await(pusherRetracted);
						await(pusherExtended);
						// At pick-up
						emit capPos(1);
						await(pusherRetracted);
						emit capDec;
				}
			}
			await(refill);
		}
	}
	||
	{
		
		while(true){
			present(c1){
				System.out.println("q");
			}
			present(c2){
				System.out.println("1");
			}
//			present(c3){
				System.out.println("2");
//			}
			pause;
		}
	}
	||
	{// To viz
		{while(true){present(pusherRetracted){emit pusherRetractedE;} pause;}}
		||
		{while(true){present(pusherExtended){emit pusherExtendedE;} pause;}}
		||
		{while(true){present(WPgripped){emit WPgrippedE;} pause;}}
		||
		{while(true){present(armAtSource){emit armAtSourceE;} pause;}}
		||
		{while(true){present(armAtDest){emit armAtDestE;} pause;}}
		||
		{while(true){present(empty){emit emptyE;} pause;}}
	}
	
}

reaction Conveyor(: input signal enable){
	while(true) {
		System.out.println("!CapLoaddaaa");
		pause;
	}
}

PlantCD(input signal pusherExtend,vacOn,armSource,armDest;
	input signal enable,refill;
	output signal pusherRetracted,pusherExtended,WPgripped,armAtSource,armAtDest,empty;
	output signal pusherRetractedE,pusherExtendedE,WPgrippedE,armAtSourceE,armAtDestE,emptyE;
)->{ //CapLoader(:c1,c2,c3,pusherExtend,vacOn,armSource,armDest,enable,refill,bottleAtPos1,pusherRetracted,pusherExtended,
		//	WPgripped,armAtSource,armAtDest,empty,pusherRetractedE,pushExtendedE,WPgrippedE,armAtSourceE,armAtDestE,emptyE)
	Conveyor(:enable)
}
