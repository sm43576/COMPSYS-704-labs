Orchestrator(
		input String channel conveyorStatus;
		input Boolean channel rotaryStatus;
		output Boolean channel conveyorReq, allOperationsFinished;
		input Order channel order;
		output Order channel doneOrder;
		)
->{
	// TODO: Temp delete later
	int[] liquidPercent = new int[]{10, 10, 20, 60};
	int quantity = 5;
	
	// final
	int bottlePlaced;
	{// Conveyor Orchestator logic
		// Assumption - only one order at a time.
		while(true) {
			// insert present(order) here
			bottlePlaced = quantity;
			while(bottlePlaced <= 0) {
				System.out.println("sending conveyor req?");
				send conveyorReq(true);
				bottlePlaced--;
				
				// keep looking at the status until done is found
				while(true) {
					receive conveyorStatus;
					String conveyStat = #conveyorStatus;
					if(conveyStat == "done") {
						System.out.println("conveyor done - yeeting loop");
						break;
					}
					pause;
				}
				
				pause;
			}
			
			System.out.println("Done order");
			//TODO: send doneOrder signal
//			send doneOrder(order)
			pause;
		}
	}
	||
	{// Filler Orchestrator Logic
		while(true) {
			receive rotaryStatus;
			String rotaryStat = #rotaryStatus;
			
			// wait for rotary status to be done
			if(rotaryStat == "done") {
				send fillerReq(true);
			}
		}
		
	}
	
		
		 /* 
		 * ||		caploader
		 * {
			 * while(true){
			 * // wait for rotatary status to be done // let controller figure out if it needs to do it (i.e: checking if bottle at pos 3)
			 * 	await(rotaryStatus == "done" and bottle is at pos 3) <-- need another signal from rotary controller to say what components need to be used?
			 * 	then:
			 *		tell cap loader controller to do its work
			 *		send caploaderReq
			 *}
		 *}
		 * 
		 * ||		Capper
		 * {
			 * while(true){
			 * // wait for rotatary status to be done and a bottle is at position 4 so we can start cap loading process
			 * 	await(rotaryStatus == "done" and bottle is at pos 4) <-- need another signal from rotary controller to say what components need to be used?
			 * 	then:
			 *		tell cap loader controller to do its work
			 *		send capScrewerReq
			 *	}	
		 *}	 * 
		 * || //Component Status handling
		 * 		{// Receiving status from componenets
					while(true) {
						receive conveyorStatus, fillerStatus, capLoaderStatus, capScrewerStatus;
						String statusConvey = (String) #conveyorStatus;
						etc
						
						if converyorStatus and fillerStatus and capLoaderStatus and CapScrewerStatus == "done"
							or converyorStatus or fillerStatus or capLoaderStatus or CapScrewerStatus  == "idle"
							(if components are done or idle)
						then:
							abort when rotaryStatus == "done" otherwise do:
								send a request for rotary to start moving using allOperationsFinished
						
						System.out.println(status);
						
						pause;
					}	
				}


	 * 
	 * ||
		 * 		*IGNORE TOO HARD IMPLEMENTATION*
	 * 		second button UI
	 * 			takes out bottle if cap is present.
	 * Prob don't need:
	 * switch(status) {
		case "idle":
			System.out.println("received Idle");
			//send(rotaryIdle)
		case "busy":
			System.out.println("received Busy");
			//send(rotaryBusy)
			
		case "done":
			System.out.println("received Done");
			//send(rotaryDOne)
		default:
			System.out.println("afk");
	}
	System.out.println("orchestator is here");
 * 
	 * 
	
	*/



}