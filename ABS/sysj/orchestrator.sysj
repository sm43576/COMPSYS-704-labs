import java.util.ArrayList;
Orchestrator(
		input String channel conveyorStatus, capperStatus, capLoaderStatus, fillerStatus, rotaryStatus;
		output Boolean channel conveyorReq, rotaryReq, fillerReq, capperReq, capLoaderReq;
		input Order channel order;
		output Order channel doneOrder;
		
		output ArrayList channel percentLiquid;
		
		)
->{
	signal sigConveyorReq, sigCapperReq, sigCapLoaderReq, sigFillerReq, sigRotaryReq;
	signal recConveyorStatus, recCapperStatus, recCapLoaderStatus, recFillerStatus, recRotaryStatus;
	signal getNextBottle;
	{
		
		int quantity = 5;
		int bottlePlaced = 0; 
		ArrayList liquidPercent = new ArrayList();
		liquidPercent.add(10);
		liquidPercent.add(10);
		liquidPercent.add(20);
		liquidPercent.add(60);
		
		while(true) {
			// insert present(order) here
			bottlePlaced = quantity;
			while(bottlePlaced >= 0) {
				System.out.println("Orch: Sending conveyor request");
				emit sigConveyorReq(true);
				await(recConveyorStatus);
				System.out.println("Orch: Received conveyor status");
				bottlePlaced--;
				await(getNextBottle);
				System.out.println("Orch: Number of bottles left to do: " + bottlePlaced);
				pause;
			}
			
			System.out.println("Done order");
			halt;
			pause;
		}
	}
	||
	{
		while(true) {
			await(sigConveyorReq); //Internal signal to send conveyor request
			send conveyorReq(true); //Send actual request
			receive conveyorStatus; //Receive actual response.
			String res = (String) #conveyorStatus; //Retrieve string from actual response.
			emit recConveyorStatus(res); //Emit internal signal that request has been received.
		}
	}
	||
	{
		while(true) {
			await(sigCapperReq);  
			System.out.println("Orch: Sending capper request");
			send capperReq(true); 
			receive capperStatus; 
			System.out.println("Orch: Received capper status");
			String res = (String) #capperStatus; 
			emit recCapperStatus(res); 
		}
	}
	||
	{
		while(true) {
			await(sigCapLoaderReq);
			System.out.println("Orch: Sending cap loader request");
			send capLoaderReq(true); 
			receive capLoaderStatus; 
			System.out.println("Orch: Received cap loader status");

			String res = (String) #capLoaderStatus; 
			emit recCapLoaderStatus(res); 
		}
	}
	||
	{
		while(true) {
			await(sigFillerReq);
			System.out.println("Orch: Sending filler request");
			send fillerReq(true); 
			receive fillerStatus;
			System.out.println("Orch: Received filler status");
			String res = (String) #fillerStatus; 
			emit recFillerStatus(res); 
		}
	}
	||
	{
		while(true) {
			await(sigRotaryReq);
			System.out.println("Orch: Sending rotary request");
			send rotaryReq(true);
			receive rotaryStatus; 
			System.out.println("Orch: Received rotary status");
			String res = (String) #rotaryStatus; 
			emit recRotaryStatus(res); 
		}
	}
	||
	{
		while(true) {
			//Startup procedure.
			await(recConveyorStatus); //Await for first bottle to be delivered to position 1.
			emit sigRotaryReq; //Turn rotary table.
			await(recRotaryStatus);
			
			while(true) {
				
				System.out.println("Orch: New bottle. Preparing to send requests..");
				emit sigFillerReq;
				emit sigCapLoaderReq;
				emit sigCapperReq;
				{await(recFillerStatus);} || {await(recCapLoaderStatus);} || {await(recCapperStatus);}
				
				//Completed all tasks, send request to rotary.
				emit sigRotaryReq;
				await(recRotaryStatus);
				
				//Send request to get new bottle on conveyor.
				emit getNextBottle;
				
				pause;
			}
			pause;
		}
			
	}
}
//	||
//	{// Requesting work to filler, capper and caploader
//		while(true) {
//			receive rotaryStatus;
//			String rotaryStat = #rotaryStatus;
//			
//			// wait for rotary status to be done
//			if(rotaryStat == "done") {
//				System.out.println("rotary done, sending filler,loader,screwer, conveyor reqs");
//				send fillerReq(true);
//				send capLoaderReq(true);
//				send capperReq(true);
//				emit getNextBottle;
//			}
	
	
//			pause;
//		}
//		
//	}
//	||
//	{ // Rotary Orchestrator logic
//		// GOal is to get all the status and emit done if all are done.			
//		// wait until everything else is done or idle
//		// False = done, true = busy
//		while(true) {
//			if((Status.conveyStat==false) && 
//				(Status.fillerStat==false) &&
//				(Status.capperStat==false) &&
//				(Status.capLoaderStat==false)){
//				System.out.println("Orch sending rotary req");
//				send rotaryReq(true);
//			}else {
//				send rotaryReq(false);
//			}
//			pause;
//		}//while true
//	}




