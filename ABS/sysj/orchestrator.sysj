import java.util.ArrayList;
Orchestrator(
		input String channel conveyorStatus, capperStatus, capLoaderStatus, fillerStatus, rotaryStatus;
		output Boolean channel conveyorReq, rotaryReq, fillerReq, capperReq, capLoaderReq;
		input Order channel order;
		output Order channel doneOrder;
		)
->{
	signal sigConveyorReq, sigCapperReq, sigCapLoaderReq, sigRotaryReq;
	ArrayList signal sigFillerReq;
	signal recConveyorStatus, recCapperStatus, recCapLoaderStatus, recFillerStatus, recRotaryStatus;
	signal getNextBottle;
	{
		while(true) {
			await(sigConveyorReq); //Internal signal to send conveyor request
			send conveyorReq(true); //Send actual request
			receive conveyorStatus; //Receive actual response.
			String res = (String) #conveyorStatus; //Retrieve string from actual response.
			emit recConveyorStatus(res); //Emit internal signal that request has been received.
		}
	}
	||
	{
		while(true) {
			await(sigCapperReq);  
			System.out.println("Orch: Sending capper request");
			send capperReq(true); 
			receive capperStatus; 
			System.out.println("Orch: Received capper status");
			String res = (String) #capperStatus; 
			emit recCapperStatus(res); 
		}
	}
	||
	{
		while(true) {
			await(sigCapLoaderReq);
			System.out.println("Orch: Sending cap loader request");
			send capLoaderReq(true); 
			receive capLoaderStatus; 
			System.out.println("Orch: Received cap loader status");

			String res = (String) #capLoaderStatus; 
			emit recCapLoaderStatus(res); 
		}
	}
	||
	{
		while(true) {
			await(sigFillerReq);
			System.out.println("Orch: Sending filler request");
			ArrayList req = (ArrayList) #sigFillerReq;
			send fillerReq(req); 
			receive fillerStatus;
			System.out.println("Orch: Received filler status");
			String res = (String) #fillerStatus; 
			emit recFillerStatus(res); 
		}
	}
	||
	{
		while(true) {
			await(sigRotaryReq);
			System.out.println("Orch: Sending rotary request");
			send rotaryReq(true);
			receive rotaryStatus; 
			System.out.println("Orch: Received rotary status");
			String res = (String) #rotaryStatus; 
			emit recRotaryStatus(res); 
		}
	}
	||
	{
		ArrayList liquidPercent = new ArrayList();
		liquidPercent.add(10);
		liquidPercent.add(10);
		liquidPercent.add(20);
		liquidPercent.add(60);
		
		int quantity = 10;
		int count = 0;
		int eject = 0;
		count = quantity;
		//Accept order here.
		while(true) {
			
			System.out.println("Orch: Loading first bottle...");
			emit sigConveyorReq(true);
			await(recConveyorStatus);
			System.out.println("Orch: First bottle loaded.");
			emit sigRotaryReq; //Turn rotary table.
			await(recRotaryStatus);
			
			while(count >= 0) {
				
				if (count == 0) {
					System.out.println("Orch: Last bottle. Preparing to send requests..");
				} else {
					System.out.println("Orch: Bottle count " + count + ". Preparing to send requests..");
				}
				emit sigFillerReq(liquidPercent);
				emit sigCapLoaderReq;
				emit sigCapperReq;
				{await(recFillerStatus);} || {await(recCapLoaderStatus);} || {await(recCapperStatus);}
				System.out.println("Orch: All done!");
				
				count--; //Decrease bottle count;

				if (count >= 0) {
					//Get next bottle
					System.out.println("Orch: Loading next bottle...");
					emit sigConveyorReq(true);
					await(recConveyorStatus);
					System.out.println("Orch: Loaded new bottle.");
										
					//Completed all tasks, send request to rotary.
					emit sigRotaryReq;
					await(recRotaryStatus);
				}
				
				pause;
			}
			
			System.out.println("Ejecting all bottles");
			
			if (quantity >= 5) {
				eject = 5;
			} else {
				eject = quantity;
			}
			
			//Eject all bottles.
			while (eject >= 0) {
				emit sigRotaryReq;
				await(recRotaryStatus);
				emit sigConveyorReq;
				await(recConveyorStatus);
				eject--;
			}
			
			
			System.out.println("Orch: Order complete.");
			halt;
			pause;
		}
			
	}
}




