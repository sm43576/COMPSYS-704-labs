import java.util.ArrayList;
Orchestrator(
		input String channel conveyorStatus, capperStatus, capLoaderStatus, fillerStatus, rotaryStatus;
		output Boolean channel conveyorReq, allOperationsFinished, fillerReq, capperReq, capLoaderReq;
		input Order channel order;
		output Order channel doneOrder;
		
		output ArrayList channel percentLiquid;
		
		)
->{
	// TODO: Temp delete later
	
//	int quantity = 5;
//	int bottlePlaced = 0;
	signal getNextBottle;
	// final
	{// Conveyor Orchestator logic
		// Assumption - only one order at a time.
		int quantity = 5;
		int bottlePlaced = 0; 
		ArrayList liquidPercent = new ArrayList();
		liquidPercent.add(10);
		liquidPercent.add(10);
		liquidPercent.add(20);
		liquidPercent.add(60);
		
		// present X
		
		while(true) {
			// insert present(order) here
			bottlePlaced = quantity;
			while(bottlePlaced >= 0) {
				System.out.println("sending conveyor req?");
				send conveyorReq(true);
				bottlePlaced--;
				System.out.println(liquidPercent.get(3));
				await(getNextBottle);
				
				pause;
			}
			
			System.out.println("Done order");
			//TODO: send doneOrder signal
//			send doneOrder(order)
			pause;
		}
	}
	||
	{// Requesting work to filler, capper and caploader
		while(true) {
			receive rotaryStatus;
			String rotaryStat = #rotaryStatus;
			
			// wait for rotary status to be done
			if(rotaryStat == "done") {
				System.out.println("rotary done, sending filler,loader,screwer, conveyor reqs");
				send fillerReq(true);
				send capLoaderReq(true);
				send capperReq(true);
				emit getNextBottle;
			}
			else {
				send fillerReq(false);
				send capLoaderReq(false);
				send capperReq(false);
			}
			pause;
		}
		
	}
	||
	{	// True = Something happpening in the state
		boolean conveyStat =false;
		boolean fillerStat=false;
		boolean capperStat=false;
		boolean capLoaderStat= false;
		
		{// sub reaction
		
			
			{ // Check conveyor
				while (true) {
					receive conveyorStatus; 
					String conveyValue= #conveyorStatus;
					if (conveyValue == "busy") {
						conveyStat = true;
					}
					else {
						conveyStat = false; //idle and done are the same
					}
					pause;
				}
			}	
			||
			{//Check filler
				while(true) {
				receive fillerStatus; 
				String fillerValue= #fillerStatus;
				if (fillerValue == "busy") {
					fillerStat = true;
				}
				else {
					fillerStat = false; //idle and done are the same
				}
				pause;
				}
			}
				
			||
			{	while(true) {
				receive capperStatus; 
				String capperValue= #capperStatus;
				if (capperValue == "busy") {
					capperStat = true;
				}
				else {
					capperStat = false; //idle and done are the same
				}
				pause;
				}
			}
			||
			{	while(true) {
				receive capLoaderStatus; 
				String capLoaderValue= #capLoaderStatus;
				if (capLoaderValue == "busy") {
					capLoaderStat = true;
				}
				else {
					capLoaderStat = false; //idle and done are the same
				}
				pause;
				}
			}
		
		
		||
		
			{ // Rotary Orchestrator logic
				// GOal is to get all the status and emit done if all are done.			
					// wait until everything else is done or idle
				while(true) {
					if((conveyStat==true) && 
						(fillerStat==true) &&
						(capperStat==true) &&
						(capLoaderStat==true)){
	
						send allOperationsFinished(true);
					}else {
						send allOperationsFinished(false);
					}
					pause;
				
				}//while true
			}	//Rotary close
		
		}//subreaction
	}// wholereactionclose
		
}// this is the reaction to the clock.




