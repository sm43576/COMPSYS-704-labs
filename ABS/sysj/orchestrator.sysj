Orchestrator(
		input String channel conveyorStatus, capperStatus, capLoaderStatus, fillerStatus, rotaryStatus;
		output Boolean channel conveyorReq, allOperationsFinished, fillerReq, capperReq, capLoaderReq;
//		output int[] signal percentLiquid;
		input Order channel order;
		output Order channel doneOrder;
		
		)
->{
	// TODO: Temp delete later
	int[] liquidPercent = new int[]{10, 10, 20, 60};
	int quantity = 5;
	signal getNextBottle;
	// final
	int bottlePlaced = 0;
	{// Conveyor Orchestator logic
		// Assumption - only one order at a time.
		while(true) {
			// insert present(order) here
			bottlePlaced = quantity;
			while(bottlePlaced <= 0) {
				System.out.println("sending conveyor req?");
				send conveyorReq(true);
				bottlePlaced--;
				
				await(getNextBottle);
				
				pause;
			}
			
			System.out.println("Done order");
			//TODO: send doneOrder signal
//			send doneOrder(order)
			pause;
		}
	}
	||
	{// Requesting work to filler, capper and caploader
		while(true) {
			receive rotaryStatus;
			String rotaryStat = #rotaryStatus;
			
			// wait for rotary status to be done
			if(rotaryStat == "done") {
				send fillerReq(true);
				send capLoaderReq(true);
				send capperReq(true);
				emit getNextBottle;
			}
			pause;
		}
		
	}
	||
	{ // Rotary Orchestrator logic
		while(true) {
			receive conveyorStatus; 
			receive fillerStatus;
			receive capLoaderStatus;
			receive capperStatus;
			
			String coveyStat = #conveyorStatus;
			String fillerStat = #fillerStatus;
			String screwerStat = #capLoaderStatus;
			String loaderStat = #capperStatus;
			
			// wait until everything else is done or idle
			if((conveyStat == "done" || conveyStat == "idle") && 
				(fillerStat == "done" || fillerStat == "idle") &&  
				(screwerStat == "done" || screwerStat == "idle") && 
				(loaderStat == "done" || loaderStat == "idle")) {
				
				send allOperationsFinished(true);
			}
			pause;
		}
	}
}
		 /* || //Component Status handling
		 * 		{// Receiving status from componenets
					while(true) {
						receive conveyorStatus, fillerStatus, capLoaderStatus, capScrewerStatus;
						String statusConvey = (String) #conveyorStatus;
						etc
						
						if converyorStatus and fillerStatus and capLoaderStatus and CapScrewerStatus == "done"
							or converyorStatus or fillerStatus or capLoaderStatus or CapScrewerStatus  == "idle"
							(if components are done or idle)
						then:
							abort when rotaryStatus == "done" otherwise do:
								send a request for rotary to start moving using allOperationsFinished
						
						System.out.println(status);
						
						pause;
					}	
				}


	 * 
	 * ||
		 * 		*IGNORE TOO HARD IMPLEMENTATION*
	 * 		second button UI
	 * 			takes out bottle if cap is present.
	 * Prob don't need:
	 * switch(status) {
		case "idle":
			System.out.println("received Idle");
			//send(rotaryIdle)
		case "busy":
			System.out.println("received Busy");
			//send(rotaryBusy)
			
		case "done":
			System.out.println("received Done");
			//send(rotaryDOne)
		default:
			System.out.println("afk");
	}
	System.out.println("orchestator is here");
 * 
	 * 
	
	*/



