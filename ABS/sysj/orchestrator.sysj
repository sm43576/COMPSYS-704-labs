Orchestrator(
		input String channel conveyorStatus;
		input Boolean channel rotaryStatus;
		output Boolean channel conveyorReq, allOperationsFinished;
		)
->{
	//receive bottle
	//do action
	//output bottle
	
	/*	POS
	 * 		number of bottles feed into conveyor
	 * bottlePlace = 0; amount of bottles placed on the conveyor
	 * POSbottleamount    = amount of bottles requested by the POS
	 * bottlePlace  	  = decrement value 
	 * 
	 * Assumption - only one order at a time.
	 * 
	 * 
	 * 
	 * 
	 * 
	 * present(x)   //do order.
		 * 
		 * || ORder system / bottle placement.
		 *
		 * 		while true(){
				 	place a bottle if it is not equal to the POS order quantity
			 * 		if bottlePlace != POSorder  // we have one bottle in the system and 5 left
			 * 			// Send a request to conveyor controller to move the bottle at pos 1
			 * 			send conveyorReq(true);
						System.out.println("sending?");
			 * 			put bottle on conveyor, emit conveyorReq //simulates a bottle entering the conveyor system
			 * `		bottlePlace -=1 //
			 * 
			 * 			// wait for rotatary status to be done so we can add a new bottle
			 * 			 await(rotaryStatus == "done")
			 * 
			 * 		}
		 * ----------------------------------------------------------------------------------------------
		 *
		 * ||		Filler
		 * {
			 * while(true){
			 * // wait for rotatary status to be done and a bottle is at position 2 so we can start filling process
			 * 	await(rotaryStatus == "done" and bottle is at pos 2) <-- need another signal from rotary controller to say what components need to be used?
			 * 	then:
			 *		tell filler controller to do its work and send it details about the liquid specifications
			 *		send FillerReq
			 *		send liquidSpec
			 *}
		 *}
		 * 
		 * 
		 * ||		caploader
		 * {
			 * while(true){
			 * // wait for rotatary status to be done and a bottle is at position 3 so we can start cap loading process
			 * 	await(rotaryStatus == "done" and bottle is at pos 3) <-- need another signal from rotary controller to say what components need to be used?
			 * 	then:
			 *		tell cap loader controller to do its work
			 *		send caploaderReq
			 *}
		 *}
		 * 
		 * ||		Capper
		 * {
			 * while(true){
			 * // wait for rotatary status to be done and a bottle is at position 4 so we can start cap loading process
			 * 	await(rotaryStatus == "done" and bottle is at pos 4) <-- need another signal from rotary controller to say what components need to be used?
			 * 	then:
			 *		tell cap loader controller to do its work
			 *		send capScrewerReq
			 *	}	
		 *}	 * 
		 * || //Component Status handling
		 * 		{// Receiving status from componenets
					while(true) {
						receive conveyorStatus, fillerStatus, capLoaderStatus, capScrewerStatus;
						String statusConvey = (String) #conveyorStatus;
						etc
						
						if converyorStatus and fillerStatus and capLoaderStatus and CapScrewerStatus == "done"
							or converyorStatus or fillerStatus or capLoaderStatus or CapScrewerStatus  == "idle"
							(if components are done or idle)
						then:
							abort when rotaryStatus == "done" otherwise do:
								send a request for rotary to start moving using allOperationsFinished
						
						System.out.println(status);
						
						pause;
					}	
				}


	 * 
	 * ||
		 * 		*IGNORE TOO HARD IMPLEMENTATION*
	 * 		second button UI
	 * 			takes out bottle if cap is present.
	 * Prob don't need:
	 * switch(status) {
		case "idle":
			System.out.println("received Idle");
			//send(rotaryIdle)
		case "busy":
			System.out.println("received Busy");
			//send(rotaryBusy)
			
		case "done":
			System.out.println("received Done");
			//send(rotaryDOne)
		default:
			System.out.println("afk");
	}
	System.out.println("orchestator is here");
 * 
	 * 
	
	*/



}