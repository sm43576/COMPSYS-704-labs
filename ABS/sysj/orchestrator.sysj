import java.util.ArrayList;
Orchestrator(
		input String channel conveyorStatus, capperStatus, capLoaderStatus, fillerStatus, rotaryStatus;
		output Boolean channel conveyorReq, rotaryReq, fillerReq, capperReq, capLoaderReq;
		
		// --- TO and FROM POS ---
		input signal recOrderStatus;
		input Order signal order;
		output Order signal orderStatus;
		)
->{
	signal sigConveyorReq, sigCapperReq, sigCapLoaderReq, sigRotaryReq;
	ArrayList signal sigFillerReq;
	signal recConveyorStatus, recCapperStatus, recCapLoaderStatus, recFillerStatus, recRotaryStatus;
	signal getNextBottle;
	
	// --- POS ---
	signal startOrder;
	signal orderIsDone;
	signal initABS;
	signal foundCurrentOrder;
	Order signal currentOrder;
	{ 	
		// TODO changed to internal valued signal
		ArrayList fifoQueue = new ArrayList();
		ArrayList liquidPercent = new ArrayList();
		
		// --------------- POS logic  ---------------
		while(true) {
			
			{ // --- POS checking for new orders and adding it to queue --- 
//				System.out.println("awaiting order");
				present(order){ // TODO: bruh moment
					System.out.println("got order!");
					Order newOrder = #order;
					System.out.println(newOrder.getQuantity());
					// Add order to the queue (FIFO)
					fifoQueue.add(newOrder);
					
					// set current order to the first item in queue at start
					present(initABS){
						System.out.println("start of ABS get first item");
						Order tempOrder = (Order)fifoQueue.get(0);
						
						
						fifoQueue.remove(0);
						System.out.println(newOrder.getCustomerID());
						
						// set flag to start orders
						abort(foundCurrentOrder){
							emit currentOrder(tempOrder);
							emit startOrder;
						}
						
						
						// Change order status to "Started" and send it back to POS
						tempOrder.setOrderStatus("Started");
						System.out.println("emitting orderstatus: started");
						
						abort(recOrderStatus){
							sustain orderStatus(tempOrder);
						}
						
						System.out.println("orch received: recOrderStatus");
						
					}
				}
				
				// Get next order in queue when order is finished
				present(orderIsDone){
					present(currentOrder){
						Order tempOrder = #currentOrder;
						// change order status to done and send it back to POS
						tempOrder.setOrderStatus("Done");
						abort(recOrderStatus){
							sustain orderStatus(tempOrder);
						}
						
						// Get next order
						System.out.println("initialising next order...");
						if(!fifoQueue.isEmpty()) {
							Order nextOrder = (Order)fifoQueue.get(0);
							fifoQueue.remove(0);
							
							// set flag to start orders
							abort(foundCurrentOrder){
								emit currentOrder(nextOrder);
								emit startOrder;
							}
							
							// Change order status to "Started" and send it back to POS for next order
							nextOrder.setOrderStatus("Started");
							System.out.println("emitting next orderstatus: started");
							abort(recOrderStatus){
								sustain orderStatus(nextOrder);
							}
							
						}
						
					}
				}
	
			}
			pause;
		}
			
	}
	||
	{
		// POS: Sustain initABS on first start up so we know to take in the first order as soon as we get it
		while(true) {
			abort(currentOrder){
				sustain initABS;
			}
			pause;
		}
	}
	
	||
	{
		// To sustain currentOrder so other reactions can access it throughout entire process wihtout waiting for a new order
		while(true) {
			present(startOrder){
				present(currentOrder){
					Order myOrder = #currentOrder;
					// Sustain  current order until the order is done
					abort(orderIsDone){
						emit currentOrder(myOrder);
						emit foundCurrentOrder;
					}
				}
				
			}
			pause;
		}
	}
//	||
//	{// Delete later
//		// To access items in current order from valued signal
//		while(true) {
//			present(startOrder){
//				System.out.println("started order");
//				present(currentOrder){
//					System.out.println("found current order");
//					Order myOrder = #currentOrder;
//					int quantity = myOrder.getQuantity();
//					System.out.println("quantity is: " + quantity);
//					
//					emit foundCurrentOrder;
//				}
//			}
//			pause;
//		}
//	}
// --------------- POS logic end  ---------------


	||
	{
		int bottlePlaced = 0; 
		
		while(true) {
			// Get order from POS
			present(currentOrder){
				Order order = (Order)#currentOrder;
				bottlePlaced = order.getQuantity();
				
				while(bottlePlaced >= 0) {
					System.out.println("Orch: Sending conveyor request");
					emit sigConveyorReq(true);
					await(recConveyorStatus);
					System.out.println("Orch: Received conveyor status");
					bottlePlaced--;
					await(getNextBottle);
					System.out.println("Orch: Number of bottles left to do: " + bottlePlaced);
					pause;
				}
				sustain orderIsDone;
				System.out.println("Done order");
				halt;
			}
			pause;
		}
	}
	||
	{
		while(true) {
			await(sigConveyorReq); //Internal signal to send conveyor request
			send conveyorReq(true); //Send actual request
			receive conveyorStatus; //Receive actual response.
			String res = (String) #conveyorStatus; //Retrieve string from actual response.
			emit recConveyorStatus(res); //Emit internal signal that request has been received.
		}
	}
	||
	{
		while(true) {
			await(sigCapperReq);  
			System.out.println("Orch: Sending capper request");
			send capperReq(true); 
			receive capperStatus; 
			System.out.println("Orch: Received capper status");
			String res = (String) #capperStatus; 
			emit recCapperStatus(res); 
		}
	}
	||
	{
		while(true) {
			await(sigCapLoaderReq);
			System.out.println("Orch: Sending cap loader request");
			send capLoaderReq(true); 
			receive capLoaderStatus; 
			System.out.println("Orch: Received cap loader status");

			String res = (String) #capLoaderStatus; 
			emit recCapLoaderStatus(res); 
		}
	}
	||
	{
		while(true) {
			await(sigFillerReq);
			System.out.println("Orch: Sending filler request");
			ArrayList req = (ArrayList) #sigFillerReq;
			send fillerReq(req); 
			receive fillerStatus;
			System.out.println("Orch: Received filler status");
			String res = (String) #fillerStatus; 
			emit recFillerStatus(res); 
		}
	}
	||
	{
		while(true) {
			await(sigRotaryReq);
			System.out.println("Orch: Sending rotary request");
			send rotaryReq(true);
			receive rotaryStatus; 
			System.out.println("Orch: Received rotary status");
			String res = (String) #rotaryStatus; 
			emit recRotaryStatus(res); 
		}
	}
	||
	{
		
		while(true) {
			//Startup procedure.
			await(recConveyorStatus); //Await for first bottle to be delivered to position 1.
			emit sigRotaryReq; //Turn rotary table.
			await(recRotaryStatus);
			
			while(true) {
				await(currentOrder); // await until current order is sustained
				System.out.println("Orch: New bottle. Preparing to send requests..");
				// Extract liquid percent specs from order
				Order order = (Order)#currentOrder;
				ArrayList liquidPercent = (ArrayList)order.getLiquidPercentageArray();
				
				// emit to components
				emit sigFillerReq(liquidPercent);
				emit sigCapLoaderReq;
				emit sigCapperReq;
				{await(recFillerStatus);} || {await(recCapLoaderStatus);} || {await(recCapperStatus);}
				System.out.println("Orch: All done!");
				
				//Send request to get new bottle on conveyor.
				emit getNextBottle;
				await(recConveyorStatus); //Await for that to finish.
				//Completed all tasks, send request to rotary.
				emit sigRotaryReq;
				await(recRotaryStatus);
				
				
				pause;
			}
		}
	}	
}



