Orchestrator(
		input String channel conveyorStatus;
		input Boolean channel rotaryStatus;
		output Boolean channel conveyorReq, allOperationsFinished;
		)
->{
	//receive bottle
	//do action
	//output bottle
	
	/*	POS
	 * 		number of bottles feed into conveyor
	 * bottlePlace = 0; amount of bottles placed on the conveyor
	 * POSbottleamount    = amount of bottles requested by the POS
	 * bottlePlace  	  = decrement value 
	 * 
	 * Assumption - only one order at a time.
	 * 
	 * 
	 * 
	 * 
	 * 
	 * present(x)   //do order.
		 * 
		 * || ORder system / bottle placement.
		 *
		 * 		while true(){
		 * 		if bottlePlace != POSorder  // we have one bottle in the system and 5 left
		 * 			send conveyorReq(true);
					System.out.println("sending?");
		 * 			put bottle on conveyor, emit conveyorReq //simulates a bottle entering the conveyor system
		 * `		bottlePlace +=1 //
		 * 			// await(rotarytableSignal);
		 * 
		 * 		}
		 * ----------------------------------------------------------------------------------------------
		 * ||	COnveyor Status handling.
		 * 		{// Receiving conveyor status
					while(true) {
						receive conveyorStatus;
						String status = (String) #conveyorStatus;
						System.out.println(status);
						switch(status) {
							case "idle":
								System.out.println("received Idle");
								//send(rotaryIdle)
							case "busy":
								System.out.println("received Busy");
								//send(rotaryBusy)
								
							case "done":
								System.out.println("received Done");
								//send(rotaryDOne)
							default:
								System.out.println("afk");
						}
						System.out.println("orchestator is here");
						pause;
					}	
				}
		 * 			await (rotate)
		 * 			// wait for rotary signal to move it.	

		 * ||		Filler
		 *
		 * 
		 * 
		 * ||		Capper
		 * 
		 * 
		 * 
		 * ||		Caploader
		 * 
		 * 
		 * ||		Rotarytable
		 * 			check filler and req
		 * 
		 * 			abort(rotaryTableRotated){
		 * 				sustain rotaryTableReq
		 * 			}
		 * 
		 * 			abort(rotaryTableRotate)
		 * 	
		 * 
		 * 
		 * 
		 * 
	 * 	
	 * 		
	 * 
	 * ||   Rotary table
	 * 		
	 * while (true)
	 * 		await(ConveyorDone,FillerDone,CapperDone,CaploaderDone) if no system is on
	 * 			//rotate(60)				because conveyor is done that means yes bottleatPos1 and no bottleatPOs5
	 * 				
	 * 					
	 * 
	 * 
	 * 
	 * 
	 * ||
		 * 		*IGNORE TOO HARD IMPLEMENTATION*
	 * 		second button UI
	 * 			takes out bottle if cap is present.
	 * 
	 * 
	
	*/



}