import java.util.ArrayList;
Orchestrator(
		input String channel conveyorStatus, capperStatus, capLoaderStatus, fillerStatus, rotaryStatus;
		output Boolean channel conveyorReq, allOperationsFinished, fillerReq, capperReq, capLoaderReq;
		input Order channel order;
		output Order channel doneOrder;
		
		output ArrayList channel percentLiquid;
		
		)
->{
	// TODO: Temp delete later
	
//	int quantity = 5;
//	int bottlePlaced = 0;
	signal getNextBottle;
	// final
	{// Conveyor Orchestator logic
		// Assumption - only one order at a time.
		int quantity = 5;
		int bottlePlaced = 0; 
		ArrayList liquidPercent = new ArrayList();
		liquidPercent.add(10);
		liquidPercent.add(10);
		liquidPercent.add(20);
		liquidPercent.add(60);
		
		// present X
		
		while(true) {
			// insert present(order) here
			bottlePlaced = quantity;
			while(bottlePlaced >= 0) {
				System.out.println("sending conveyor req?");
				send conveyorReq(true);
				bottlePlaced--;
				System.out.println("Number of bottles left to do: " + bottlePlaced);
				await(getNextBottle);
				
				pause;
			}
			
			System.out.println("Done order");
			halt;
			//TODO: send doneOrder signal
//			send doneOrder(order)
			pause;
		}
	}
	||
	{// Requesting work to filler, capper and caploader
		while(true) {
			receive rotaryStatus;
			String rotaryStat = #rotaryStatus;
			
			// wait for rotary status to be done
			if(rotaryStat == "done") {
				System.out.println("rotary done, sending filler,loader,screwer, conveyor reqs");
				send fillerReq(true);
				send capLoaderReq(true);
				send capperReq(true);
				emit getNextBottle;
			}
			else {
				send fillerReq(false);
				send capLoaderReq(false);
				send capperReq(false);
			}
			pause;
		}
		
	}
	||
	{
		while(true) {
			receive conveyorStatus; 
			String conveyValue= #conveyorStatus;
			if (conveyValue == "busy") {
				System.out.println("Orch received - convey busy");
				Status.conveyStat = true;
			}
			else {
//				System.out.println("Orch received - convey done");
				Status.conveyStat = false; //idle and done are the same
			}
			pause;
		}
	}
	||
	{
		//Check filler
		while(true) {
			receive fillerStatus; 
			String fillerValue= #fillerStatus;
			if (fillerValue == "busy") {
				System.out.println("Orch received - filler busy");
				Status.fillerStat = true;
			}
			else {
//				System.out.println("Orch received - filler done");
				Status.fillerStat = false; //idle and done are the same
			}
			pause;
		}
	}
	||
	{	
		while(true) {
			receive capperStatus; 
			String capperValue= #capperStatus;
			if (capperValue == "busy") {
				System.out.println("Orch received - capper busy");
				Status.capperStat = true;
			}
			else {
//				System.out.println("Orch received - capper done");
				Status.capperStat = false;
			}
			
			pause;
		}
	}
	||
	{	while(true) {
			receive capLoaderStatus; 
			String capLoaderValue= #capLoaderStatus;
			if (capLoaderValue == "busy") {
				System.out.println("Orch received - loader busy");
				Status.capLoaderStat = true;
			}
			else {
//				System.out.println("Orch received - loader done");
				Status.capLoaderStat = false; //idle and done are the same
			}
			pause;
		}
	}
	||
	{ // Rotary Orchestrator logic
		// GOal is to get all the status and emit done if all are done.			
		// wait until everything else is done or idle
		// False = done, true = busy
		while(true) {
			if((Status.conveyStat==false) && 
				(Status.fillerStat==false) &&
				(Status.capperStat==false) &&
				(Status.capLoaderStat==false)){
				System.out.println("Orch sending rotary req");
				send allOperationsFinished(true);
			}else {
				send allOperationsFinished(false);
			}
			pause;
		}//while true
	}
}



