Controller(
		input signal bottleAtPos1, bottleAtPos5;
		output signal motConveyorOnOff;
		)
->{

	while(true) {
	
	//	System.out.println("Hello World!");
	//Wait until bottle at position 5 hasn't left yet
		await(bottleAtPos5);
	//	System.out.println("bottle at pos 5 hasn't left yet");
		pause;

		abort(bottleAtPos1 && !bottleAtPos5) {//cant abort before it let the turntable rotate with bottle at pos5.
			present(!bottleAtPos1){ //when bottle is not at position 1
		//		System.out.println("Motor is on"); 
				sustain motConveyorOnOff;  // keep motor on

			}
		}
	//	System.out.println("Motor is off");
		pause;
	}
}


RotaryTable(
        input signal tableAlignedWithSensor, capOnBottleAtPos1, RTbottleAtPos1;
        //input channel allOperationsFinished; // From Orchestrator
        output signal rotaryTableTrigger; // To Plant
        //output channel rotaryStatus; // To Orchestrator
        )
->{
    signal allOperationsFinished;
    while(true) {
        System.out.println("HELLLLLLLLO");
        await(RTbottleAtPos1);
        System.out.println("A bottle is at position 1");
        pause;
        
        // wait until there is no cap on the bottle at position 1 (i.e.) bottle is removed
        await(!capOnBottleAtPos1);
        System.out.println("A cap bottle is NOT on the bottle at pos 1");
        pause;
        
//        // wait until it receives an OK from orchestrator
//        await(allOperationsFinished);
//        System.out.println("RECIEVED orchestrator task");
//        pause;
        
        // when the rotoray table is aligned with sensor stop sustaining the trigger
        abort(tableAlignedWithSensor){
            System.out.println("emitting rotary trigger");
            emit rotaryTableTrigger;
            // emit rotaryStatus("busy");
        }
        pause;
        System.out.println("out - next loop");
        
    }
//    ||
//    {
//        // Send idling status to orchestrator.
//        abort(!allOperationsFinished){
//            System.out.println("idling...");
//            pause;
//    //        sustain rotaryStatus("idle");
//        }
//    }
//    ||
//    {
//        // Temporary delete when merging & have orchestrator
//        while(true) {
//            abort(tableAlignedWithSensor && RTbottleAtPos1){
////                System.out.println("ORCHESTRATOR says - rotate turntable plz");
//                emit allOperationsFinished;
//            }
//            pause;
//        }
//    }
}

LiquidFiller(
		input signal fillerReq; 
		input signal bottleAtPos2,dosUnitEvac,dosUnitFilled; 
		input Integer signal selectCanister;
		input Integer signal percentLiquid;
		
		input Integer signal currentlySelectedCanister; 
		output signal valveInjectorOnOff,valveInletOnOff,dosUnitValveRetract,dosUnitValveExtend;
		)
->{
	while(true) {
		//dc that input from controller is sent,stays high
		present(bottleAtPos2){
			present(fillerReq){
				present(selectCanister){
					present (percentLiquid){
						
		//Given the assumption that the selected canister is externally rotated
		// wait till the selected canister matches the orchestra.
		present(selectCanister){
			if (#selectCanister == #currentlySelectedCanister){// wait till canister match
				// emit(valveInjectorOnOff);
				System.out.println("Canister match");
				 abort(!dosUnitEvac){ // brings canister to the top
						sustain dosUnitValveRetract;//
				 }
				 System.out.println("Canister above bottle");
				 pause;
				 
				 abort(dosUnitFilled){ // close valve once filled
					 sustain valveInletOnOff; 
				 }
				 System.out.println("Bottle controller filled");
				 
				 abort(dosUnitEvac){// bring cylinder to the bottom
					 sustain dosUnitValveExtend;
				 }
				 System.out.println("Canister returned");
				
			}
		}
		}}}}
		pause;
	}
	
}

Capper(
		input signal bottleAtPos4;
		input signal gripperZAxisLowered;
		input signal gripperZAxisLifted;
		input signal gripperTurnHomePos;
		input signal gripperTurnFinalPos;
		input signal gripperGrippedCap;
		
		output signal cylPos5ZAxisExtend;
		output signal gripperTurnRetract;
		output signal gripperTurnExtend;
		output signal capGripperPos5Extend;
		output signal cylClampBottleExtend;
		)
->{
	
}