import java.util.ArrayList;
Conveyor(
		input signal bottleAtPos1, bottleLeftPos5, bottleAtPos5;
		input Boolean channel conveyorReq;
		output signal motConveyorOnOff, motorPos1On, motorPos5On;
		output String channel conveyorStatus;
		)
->{

	while(true) {

		receive conveyorReq; // send a request everytime bottle on the conveyor belt.
		
		Boolean req = (Boolean) #conveyorReq;		
		if(req) { //bottle has entered from left side.
			System.out.println("ConveyorController: Request received from orch.");
			present(bottleAtPos5){
				System.out.println("ConveyorController: Moving bottle 5...");
				abort(bottleLeftPos5){ // run until bottle has left position5
					{sustain motConveyorOnOff;} || {sustain motorPos5On;}
				}
				System.out.println("ConveyorController: Moved bottle 5.");
			}	
			
			// abort when bottle is at position 1, otherwise turn on motor
			present(!bottleAtPos1 && !bottleAtPos5){
				System.out.println("ConveyorController: No bottle at pos 1 or pos 5."); 
				abort(bottleAtPos1) {
					System.out.println("ConveyorController: Motor is on"); 
					{sustain motConveyorOnOff;} || {sustain motorPos1On;}
	
				}
			}
			System.out.println("ConveyorController: Motor is off");
			send conveyorStatus("done");
			pause;
		} 	
		pause;
	}
}


RotaryTable(
        input signal tableAlignedWithSensor, capOnBottleAtPos1, RTbottleAtPos1;
        input Boolean channel rotaryReq; // From Orchestrator
        output signal rotaryTableTrigger; // To Plant
        output Boolean channel rotaryStatus; // To Orchestrator 
        )
->{
    while(true) {
        receive rotaryReq;
        Boolean request = (boolean) #rotaryReq;
        
        // wait until it receives an OK from orchestrator
        if(request) {
        	await(RTbottleAtPos1);
        	
        	// when the rotoray table is aligned with sensor stop sustaining the trigger
            abort(tableAlignedWithSensor){
                sustain rotaryTableTrigger;
            }
            System.out.println("RotaryController - finished");
            send rotaryStatus("done");
        }
        
        pause;
        
    }
}

LiquidFiller(
		input ArrayList channel fillerReq;
		input signal bottleAtPos2,dosUnitEvac,dosUnitFilled, valveInjectorActive;
		input Integer signal selectedCanister, selectedPercentage;
		
		output signal valveInjectorOnOff,valveInletOnOff,dosUnitValveRetract,dosUnitValveExtend;
		output Integer signal selectCanister, selectPercentage;	
		output String channel fillerStatus;
		)
->{
	
	while(true) {
		receive fillerReq; 
		
		// No bottle at position 2 then send idle status
		System.out.println("FillerController: - Received request");
		present(!bottleAtPos2){
			System.out.println("FillerController: - Idle (no bottle at pos 2).");
			send fillerStatus("idle");
		}
	
		// bottle IS at position 2 then do filler work
		present(bottleAtPos2){
			System.out.println("FillerController: - Bottle detected at position 2.");
			ArrayList recPercentLiq = (ArrayList) #fillerReq; // [32,43,22,3]  += 100%				
			int canisterNum = 1;	// reset, select first canister.
			
			while(canisterNum<5) {
				//Select Canister
				abort(selectedPercentage){//wait till canister selected
					System.out.println("selecting percentage " + recPercentLiq.get(canisterNum-1));
					emit selectPercentage(recPercentLiq.get(canisterNum-1));// send percentage want to befilled
				}
				abort(selectedCanister){//wait till canister selected
					System.out.println("selecting canister " + canisterNum);
				 	sustain selectCanister(canisterNum);  // send the selected canisterNUm we want.
				}
			
				//Turn on valve injector & bring up pressure canister up to fill with liquid.
				//On abort, stop sending signal to bring to top (canister should stay at the top)
				//Not emitting valveInjectorOnOff should turn off the valve injector.
				 //System.out.println("FillerController: Turning on valve injector and bringing canister to top...");
				 abort(dosUnitFilled && valveInjectorActive){ 
						{sustain dosUnitValveRetract;} || {sustain valveInjectorOnOff;}
				 }
				 //System.out.println("FillerController: Canister at top. Turned off valve injector.");
				 
				 //System.out.println("FillerController: Turning on valve inlet & forcing bottle down.");
				 abort(dosUnitEvac){
					 {sustain valveInletOnOff;}||{sustain dosUnitValveExtend;} //Turn on valve inlet and bring bottle to bottom.
				 }
			
				 canisterNum+=1; // switch to the next one. 
				 pause;
			}	
			send fillerStatus("done");
		}
		pause;
	}
		
}


Capper(
		
		//To and from Orchestrator
		input boolean channel capperReq;
		output String channel capperStatus;
		
		//From Capper Plant
		input signal bottleAtPos4;
		input signal gripperZAxisLowered;
		input signal gripperZAxisLifted;
		input signal gripperTurnHomePos;
		input signal gripperTurnFinalPos;
		input signal cylClampedBottle;//nani what
		input signal gripperGrippedCap;
		
		//To Capper Plant
		output signal cylPos5ZAxisExtend; //Brings the gripper down (absence of this signal will bring the gripper up)
		output signal gripperTurnRetract; //Untwists the gripper
		output signal gripperTurnExtend; //Twists the gripper
		output signal capGripperPos5Extend; //Grips the cap (absence of this signal will release the cap)
		output signal cylClampBottleExtend; //Clamps the bottle (absence of this signal will unclamp the bottle)
		)

		

->{
	signal releaseCap, untwistGripper, raiseGripper, unclampBottle; 
	while(true) {
		
		receive capperReq; //Receive capper request. // BLOCKED - Hangs here coz there is no capper request at the beginning
		boolean request = (boolean) #capperReq;
	
		if (request) {
			System.out.println("CapperController: Received request");
			
			present (!bottleAtPos4) {
				send capperStatus("idle");
			}
			
			present(bottleAtPos4) { //Check if a bottle is at position 4, if not, wait until it arrives.
				System.out.println("CapperController: Capper doing work...");
				{ 
					abort (unclampBottle) {
						sustain cylClampBottleExtend; //Keep gripping the bottle until steps 1-7 have completed (in-doc).
					}
				}
				||
				{
					abort(raiseGripper) {
						sustain cylPos5ZAxisExtend; //Keep the gripper lowered until steps 1-7 have completed.
					}
				}
				||
				{
					//Wait until gripper is lowered and bottle is clamped.
					{await(gripperZAxisLowered);} || {await(cylClampedBottle);}
					abort(releaseCap) {
						sustain capGripperPos5Extend; //Grip the cap
					}
				}
				||
				{
					await(gripperGrippedCap); //Wait until cap is gripped
					
					abort (gripperTurnFinalPos) {
						sustain gripperTurnExtend; // Twist the gripper
					}
					emit releaseCap; //Release the cap
					
					abort (gripperTurnHomePos) {
						emit untwistGripper; //Untwist gripper
					}
					
					emit raiseGripper; //Raise gripper
					emit unclampBottle; //Unclamp bottle
				} 
				send capperStatus("done"); //Tell Orchestrator that the capper has finished.
			}
		}
		pause;
	}
}


Caploader(
		input signal pusherRetracted,pusherExtended,WPgripped,armAtSource,armAtDest,bottleAtPos3, magEmpty;
		output signal pusherExtend,vacOn,armSource,armDest, magReq;
		
		input Boolean channel capLoaderReq;
		output String channel capLoaderStatus;
		)
->{
	signal vacOff;
	while(true) {
			receive capLoaderReq; // BLOCKED - Hangs here coz there is no loader request at the beginning
			Boolean request = #capLoaderReq;
			if(request) {
				send capLoaderStatus("done");

//				present (!bottleAtPos3) {
//					send capLoaderStatus("idle");
//					
//				}
//				
//				present (bottleAtPos3){
//					System.out.println("Caploader Controller - bottle is at pos 3");
//					
//					//Check if magazine empty
//					
//					present(magEmpty) {
//						abort(!magEmpty){
//							sustain magReq;
//						}
//					}
//
//					//Pusher extend
//					present(pusherRetracted) { // every push tick
//						abort(pusherExtended) { //plant emits when its at X
//							sustain pusherExtend; // otherwise sustain
//						}
//					}
//					pause;
//					
//					//Move arm to object to pickup
//					abort(armAtSource) {
//						sustain armSource;
//					}
//				
//					{
//						abort(vacOff) {
//							sustain vacOn;
//						}	
//					}
//					||
//					{
//						await(WPgripped);
//						abort (armAtDest) {
//							sustain armDest;
//						}
//						emit vacOff;
//					}
//					send capLoaderStatus("done");
//				}
			}
			pause;
	}
}