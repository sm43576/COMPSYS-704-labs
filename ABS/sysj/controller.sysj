Controller(
		input signal bottleAtPos1, bottleAtPos5;
		input Boolean channel conveyorReq;
		output signal motConveyorOnOff;
		output String channel conveyorStatus;
		)
->{

	while(true) {
	
	//	System.out.println("Hello World!");
	//Wait until bottle at position 5 hasn't left yet
		receive conveyorReq;
		
		Boolean req = (Boolean) #conveyorReq;
		System.out.println("received?");
		System.out.println(req);
		
		if(req) {
			send conveyorStatus("busy");
		
			System.out.println("conveyor busy");
			await(bottleAtPos5);
		//	System.out.println("bottle at pos 5 hasn't left yet");
			pause;
	
			abort(bottleAtPos1 && !bottleAtPos5) {//cant abort before it let the turntable rotate with bottle at pos5.
				present(!bottleAtPos1){ //when bottle is not at position 1
					System.out.println("Motor is on"); 
					sustain motConveyorOnOff;  // keep motor on
	
				}
			}
		
			System.out.println("Motor is off");
			send conveyorStatus("done");
			System.out.println("conveyor done");
			pause;
		}else {
			System.out.println("conveyor idling");
			send conveyorStatus("idle");
		}
		pause;
	}
}


RotaryTable(
        input signal tableAlignedWithSensor, capOnBottleAtPos1, RTbottleAtPos1;
        input Boolean channel allOperationsFinished; // From Orchestrator
        output signal rotaryTableTrigger; // To Plant
        output Boolean channel rotaryStatus; // To Orchestrator
        )
->{
    signal allOperationsFinished;
    while(true) {
        System.out.println("HELLLLLLLLO");
        
        // wait until it receives an OK from orchestrator
        await(allOperationsFinished);
        System.out.println("RECIEVED orchestrator task");
        pause;
        
        await(RTbottleAtPos1);
        System.out.println("A bottle is at position 1");
        pause;
        
        // wait until there is no cap on the bottle at position 1 (i.e.) bottle is removed
        await(!capOnBottleAtPos1);
        System.out.println("A cap bottle is NOT on the bottle at pos 1");
        pause;
        
        
        // when the rotoray table is aligned with sensor stop sustaining the trigger
        abort(tableAlignedWithSensor){
            System.out.println("emitting rotary trigger");
//            emit rotaryTableTrigger;
        }
//        emit rotaryStatus("done");
        pause;
        System.out.println("out - next loop");
        
    }
//    ||
//    {
//       while(true) {
//    	   // Send idling status to orchestrator.
//	        abort(!allOperationsFinished){
//	            loop{
//	            	System.out.println("idling...");
//	            	send rotaryStatus("idle");
//	            	pause;
//	            }
//	        }
//       }
//    }
 
}

LiquidFiller(
		input signal fillerReq; 
		input signal bottleAtPos2,dosUnitEvac,dosUnitFilled; 
		input Integer signal selectCanister;
		input Integer signal percentLiquid;
		
		input Integer signal currentlySelectedCanister; 
		output signal valveInjectorOnOff,valveInletOnOff,dosUnitValveRetract,dosUnitValveExtend;
		)
->{
	while(true) {
		//dc that input from controller is sent,stays high
		present(bottleAtPos2){
			present(fillerReq){
				present(selectCanister){
					present (percentLiquid){
						
		//Given the assumption that the selected canister is externally rotated
		// wait till the selected canister matches the orchestra.
		present(selectCanister){
			if (#selectCanister == #currentlySelectedCanister){// wait till canister match
				// emit(valveInjectorOnOff);
				System.out.println("Canister match");
				 abort(!dosUnitEvac){ // brings canister to the top
						sustain dosUnitValveRetract;//
				 }
				 System.out.println("Canister above bottle");
				 pause;
				 
				 abort(dosUnitFilled){ // close valve once filled
					 sustain valveInletOnOff; 
				 }
				 System.out.println("Bottle controller filled");
				 
				 abort(dosUnitEvac){// bring cylinder to the bottom
					 sustain dosUnitValveExtend;
				 }
				 System.out.println("Canister returned");
				
			}
		}
		}}}}
		pause;
	}
	
}

Capper(
		
		//To and from Orchestrator
		input signal capperReq;
		output signal capperStatus;
		
		//From Capper Plant
		input signal bottleAtPos4;
		input signal gripperZAxisLowered;
		input signal gripperZAxisLifted;
		input signal gripperTurnHomePos;
		input signal gripperTurnFinalPos;
		input signal gripperGrippedCap;
		
		//To Capper Plant
		output signal cylPos5ZAxisExtend;
		output signal gripperTurnRetract;
		output signal gripperTurnExtend;
		output signal capGripperPos5Extend;
		output signal cylClampBottleExtend;
		)


//		while(true) {
//			
//			
//			
//		}

->{
	
}


Caploader(
		input signal pusherRetracted,pusherExtended,WPgripped,armAtSource,armAtDest,empty,request;
		output signal pusherExtend,vacOn,armSource,armDest;
		input Integer signal mode;
		input signal pusherExtendM,vacOnM,armSourceM,armDestM;
		)
->{
	while(true) {

			 // Automatic
				System.out.println("Automatic state");
				present (!empty){
					
					//Pusher extend
					present(pusherRetracted) { // every push tick
						abort(pusherExtended) { //plant emits when its at X
							sustain pusherExtend; // otherwise sustain
						}
					}
					pause;
					
					//Move arm to object to pickup
					abort(armAtSource) {
						sustain armSource;
					}
					pause;
					
					//Pickup Object
					abort(WPgripped){
						sustain vacOn;
					}
					pause;
					
					//return object to destination
					abort (armAtDest) {
						{sustain armDest;} || {sustain vacOn;}
					}
					pause;
		
					}
				pause;
			
	}
}