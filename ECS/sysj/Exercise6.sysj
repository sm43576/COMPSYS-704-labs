import buffer.*;
import fibonacci.*;

reaction Pabro(: input signal A, input signal B, input signal R, output signal O, output int channel producerChannel){
	// Internal broadcast signal
	signal Obc;
	{
		while(true){
			// Set up the preemptive abort to reset when R is received
			abort(R){
				// Await for A and B synchronously.
				{await (A);} || {await (B);}
				// Broadcast, now that A and B have been receieved.
				emit Obc;
				// Wait indefinitely
				while(true){
					pause;
				}
			}
		}
		pause;
	}
	||
	{
		// Create our fibonacci generator, just like in Java
		FibonacciGenerator f = new FibonacciGenerator();
		int data = 0;
		while(true){
			// Wait for incoming broadcast signal
			await (immediate Obc);
			// Emit O, now that we have the broadcast
			emit O;
			// Send the next peice of data.
			data = f.getNext();
			send producerChannel(data);
			pause;
		}
	}
}

/**
* The Consumer Reaction extends a simple ABRO synchronous model to
* consume data received over a channel once A and B have been
* received.
*/

reaction Cabro(: input signal A, input signal B, input signal R, output signal O, input int channel consumerChannel){
	while(true){
		// Java varible to store data from the channel
		abort(R){
			int data = 0;
			// Await for A and B synchronously.
			{await (A);} || {await (B);}
			// Emit O, now that A and B have been receieved.
			emit O;
			// Receive the next peice of data.
			receive consumerChannel;
			// Retrieve the data sent over the channel.
			data = (Integer)#consumerChannel;
			// Use the SystemJ IO Logger to print it out
			System.out.println("received "+data);
			System.out.println("PC-ABRO Received next fibonacci number: " + data);
			while(true){
				pause;
			}
		}
	}
	pause;
}

/**
* The Buffer Reaction seperates a shared Java resource, the buffer,
* between two asynchronous producer and consumers.
*/

reaction Buffer(: input int channel producerChannel, output int channel consumerChannel){
	// Java Buffer Declarations
	signal bufferNotFull, bufferNotEmpty, requestData;
	Integer signal toBuffer, fromBuffer;
	{
		int data = 0;
		while(true){
			// While the buffer is not full, receive data over the channel
			present(bufferNotFull){

				/* Task 1: receive from producerChannel */
				receive producerChannel;
				/* Task 2: Retrieve data from producerChannel and assign it to 'data' */
				data = (int) #producerChannel;
				/* Task 3: emit signal 'toBuffer' with data 'data' */
				emit toBuffer(data);

				pause; // To ensure that the buffer reaction receives data before reiteration of the loop
			}
			pause;
		}
		pause;
	}
	||
	{
		int data = 0;
		while(true){
			// While the buffer is not empty, send data over the channel
			present(bufferNotEmpty){

				/* Task 4: Request data by emitting the signal 'requestData' */
				emit requestData
				pause; // Need to delay one tick
				pause; // another tick to get the feedback signal

				/* Task 5:
				*  1. Check the status of the signal 'fromBuffer'
				*  
				*  2. If the signal is present: a) Retrieve data from 'fromBuffer' and assign it to 'data'
				*                               b) Send 'data' via channel 'consumerChannel'
				*     Else do nothing
				*/

			}
			pause;
		}
		pause;
	}
	||
	{
		// Reaction buffering the received data
		Buffer myBuffer = new Buffer(100);
		int data =0;
		while(true){

			/* Task 6: If the signal 'toBuffer' is present, push the value of 'toBuffer' to myBuffer (hint use myBuffer.push method) */

			present(requestData){
				data = ((Integer)myBuffer.pop()).intValue();
				emit fromBuffer(data);
			}
			if(!myBuffer.isFull()){
				emit bufferNotFull;
			}
			if(!myBuffer.isEmpty()){
				emit bufferNotEmpty;
			}
			pause;
		}
	}
}

PabroCD(..)->Pabro
CabroCD(..)->Cabro
BufferCD(..)->Buffer
